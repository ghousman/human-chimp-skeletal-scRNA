
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #Load libraries
> library(Seurat)
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(stringi)
> library(stringr)
> library(ggplot2)
> library(colorspace)
> library(RColorBrewer)
> 
> #Define main directory
> dir <- '/project2/gilad/ghousman/skeletal-human-chimp/'
> 
> #Load batch info
> batch <- read.csv(file=paste0(dir,'human-chimp-skeletal-scRNA/data/scrna-batch.csv'), header=TRUE, sep=",")
> 
> #Load objects
> objects <- readRDS(paste0(dir,"/human-chimp-skeletal-scRNA/data/cellranger-data-full/data.indv-cell.log.rds"))
> 
> #Define list subset
> #Select features for downstream integration (keeping at 10000 for now)
> #Identify anchors (used references + RPCA reduction method) #ALL OTHER METHODS CRASH
> #Integrate datasets
> #Reduce dimensionality
> #Save data
> 
> #combine ipscs from all samples
> obj.ipsc  <- list(objects[[1]],objects[[2]],objects[[7]],objects[[8]],objects[[13]],objects[[14]],objects[[19]],objects[[20]],
+                   objects[[25]],objects[[26]],objects[[31]],objects[[32]],objects[[37]],objects[[38]])
> obj.ipsc.features <- SelectIntegrationFeatures(object.list=obj.ipsc, nfeatures=10000)
> reference_dataset <- c(3:4) #H1C1-r2 differentiated the best
> obj.ipsc <- lapply(X=obj.ipsc, FUN=function(x) {
+     x <- ScaleData(x, features=obj.ipsc.features, verbose=FALSE)
+     x <- RunPCA(x, features=obj.ipsc.features, verbose=FALSE)
+ })
> obj.ipsc.anchors <- FindIntegrationAnchors(object.list=obj.ipsc, normalization.method="LogNormalize", anchor.features=obj.ipsc.features,
+                                            reference=reference_dataset, reduction="rpca")
Scaling features for provided objects
Computing within dataset neighborhoods
Finding anchors between all query and reference datasets
Finding neighborhoods
Finding anchors
	Found 897 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 458 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 522 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 510 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 615 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 607 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 476 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 335 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 314 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 712 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 466 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 435 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 491 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 598 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 400 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 540 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 482 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 677 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 397 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 477 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 552 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 686 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 438 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 498 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 532 anchors
Extracting within-dataset neighbors
Warning message:
In CheckDuplicateCellNames(object.list = object.list) :
  Some cell names are duplicated across objects provided. Renaming to enforce unique cell names.
> int.ipsc <- IntegrateData(anchorset=obj.ipsc.anchors, normalization.method="LogNormalize")
Building integrated reference
Merging dataset 4 into 3
Extracting anchors for merged samples
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Warning: Adding a command log without an assay associated with it
Integrating dataset 1 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 2 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 5 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 6 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 7 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 8 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 9 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 10 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 11 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 12 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 13 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 14 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Warning: Adding a command log without an assay associated with it
> int.ipsc <- ScaleData(int.ipsc, verbose=FALSE)
> int.ipsc <- RunPCA(object=int.ipsc, npcs=100, verbose=FALSE)
> pva <- int.ipsc@reductions$pca@stdev^2/int.ipsc@reductions$pca@misc$total.variance
> ndim <- length(which(pva>=0.001)) #keep all dims that explaim more than 0.1% of variance
> print(ndim)
[1] 10
> int.ipsc <- RunUMAP(int.ipsc, dims=1:100)
Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric
To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'
This message will be shown once per session
08:10:26 UMAP embedding parameters a = 0.9922 b = 1.112
08:10:27 Read 37509 rows and found 100 numeric columns
08:10:27 Using Annoy for neighbor search, n_neighbors = 30
08:10:27 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
08:10:35 Writing NN index file to temp file /tmp/jobs/66564270/RtmpXBca4W/filebbf13a7c046f
08:10:35 Searching Annoy index using 1 thread, search_k = 3000
08:10:57 Annoy recall = 100%
08:10:58 Commencing smooth kNN distance calibration using 1 thread
08:11:00 Initializing from normalized Laplacian + noise
08:11:02 Commencing optimization for 200 epochs, with 1705580 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
08:11:50 Optimization finished
> saveRDS(int.ipsc, file=paste0(dir,"/human-chimp-skeletal-scRNA/data/cellranger-data-full/data.indv-cell.log.10k.int.ipsc.rds"))
> rm(obj.ipsc,int.ipsc)
> 
> #combine mscs from all samples
> obj.msc   <- list(objects[[3]],objects[[4]],objects[[9]],objects[[10]],objects[[15]],objects[[16]],objects[[21]],objects[[22]],
+                   objects[[27]],objects[[28]],objects[[33]],objects[[34]],objects[[39]],objects[[40]])
> obj.msc.features <- SelectIntegrationFeatures(object.list=obj.msc, nfeatures=10000)
> reference_dataset <- c(3:4) #H1C1-r2 differentiated the best
> obj.msc <- lapply(X=obj.msc, FUN=function(x) {
+     x <- ScaleData(x, features=obj.msc.features, verbose=FALSE)
+     x <- RunPCA(x, features=obj.msc.features, verbose=FALSE)
+ })
> obj.msc.anchors <- FindIntegrationAnchors(object.list=obj.msc, normalization.method="LogNormalize", anchor.features=obj.msc.features,
+                                            reference=reference_dataset, reduction="rpca")
Scaling features for provided objects
Computing within dataset neighborhoods
Finding anchors between all query and reference datasets
Finding neighborhoods
Finding anchors
	Found 1370 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 1097 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 565 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 794 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 682 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 1472 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 766 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 737 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 1516 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 1241 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 489 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 973 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 936 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 1128 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 555 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 766 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 1587 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 1156 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 798 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 762 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 1349 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 1374 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 519 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 811 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 776 anchors
Extracting within-dataset neighbors
Warning message:
In CheckDuplicateCellNames(object.list = object.list) :
  Some cell names are duplicated across objects provided. Renaming to enforce unique cell names.
> int.msc <- IntegrateData(anchorset=obj.msc.anchors, normalization.method="LogNormalize")
Building integrated reference
Merging dataset 4 into 3
Extracting anchors for merged samples
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Warning: Adding a command log without an assay associated with it
Integrating dataset 1 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 2 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 5 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 6 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 7 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 8 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 9 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 10 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 11 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 12 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 13 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 14 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Warning: Adding a command log without an assay associated with it
> int.msc <- ScaleData(int.msc, verbose=FALSE)
> int.msc <- RunPCA(object=int.msc, npcs=100, verbose=FALSE)
> pva <- int.msc@reductions$pca@stdev^2/int.msc@reductions$pca@misc$total.variance
> ndim <- length(which(pva>=0.001)) #keep all dims that explaim more than 0.1% of variance
> print(ndim)
[1] 14
> int.msc <- RunUMAP(int.msc, dims=1:100)
08:47:54 UMAP embedding parameters a = 0.9922 b = 1.112
08:47:55 Read 38594 rows and found 100 numeric columns
08:47:55 Using Annoy for neighbor search, n_neighbors = 30
08:47:55 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
08:48:04 Writing NN index file to temp file /tmp/jobs/66564270/RtmpXBca4W/filebbf1634e9c49
08:48:04 Searching Annoy index using 1 thread, search_k = 3000
08:48:26 Annoy recall = 100%
08:48:26 Commencing smooth kNN distance calibration using 1 thread
08:48:28 Initializing from normalized Laplacian + noise
08:48:30 Commencing optimization for 200 epochs, with 1793146 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
08:49:21 Optimization finished
> saveRDS(int.msc, file=paste0(dir,"/human-chimp-skeletal-scRNA/data/cellranger-data-full/data.indv-cell.log.10k.int.msc.rds"))
> rm(obj.msc,int.msc)
> 
> #combine osteoblasts from all samples
> obj.osteo <- list(objects[[5]],objects[[6]],objects[[11]],objects[[12]],objects[[17]],objects[[18]],objects[[23]],objects[[24]],
+                   objects[[29]],objects[[30]],objects[[35]],objects[[36]],objects[[41]],objects[[42]])
> obj.osteo.features <- SelectIntegrationFeatures(object.list=obj.osteo, nfeatures=10000)
> reference_dataset <- c(3:4) #H1C1-r2 differentiated the best
> obj.osteo <- lapply(X=obj.osteo, FUN=function(x) {
+     x <- ScaleData(x, features=obj.osteo.features, verbose=FALSE)
+     x <- RunPCA(x, features=obj.osteo.features, verbose=FALSE)
+ })
> obj.osteo.anchors <- FindIntegrationAnchors(object.list=obj.osteo, normalization.method="LogNormalize", anchor.features=obj.osteo.features,
+                                            reference=reference_dataset, reduction="rpca")
Scaling features for provided objects
Computing within dataset neighborhoods
Finding anchors between all query and reference datasets
Finding neighborhoods
Finding anchors
	Found 1505 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 804 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 475 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 412 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 458 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 905 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 442 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 508 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 624 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 511 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 297 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 447 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 336 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 960 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 387 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 507 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 829 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 780 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 485 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 441 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 842 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 965 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 453 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 518 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 489 anchors
Extracting within-dataset neighbors
Warning message:
In CheckDuplicateCellNames(object.list = object.list) :
  Some cell names are duplicated across objects provided. Renaming to enforce unique cell names.
> int.osteo <- IntegrateData(anchorset=obj.osteo.anchors, normalization.method="LogNormalize")
Building integrated reference
Merging dataset 4 into 3
Extracting anchors for merged samples
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Warning: Adding a command log without an assay associated with it
Integrating dataset 1 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 2 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 5 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 6 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 7 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 8 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 9 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 10 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 11 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 12 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 13 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 14 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
