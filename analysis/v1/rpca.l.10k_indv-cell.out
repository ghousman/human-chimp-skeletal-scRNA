
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #Load libraries
> library(Seurat)
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(stringi)
> library(stringr)
> library(ggplot2)
> library(colorspace)
> library(RColorBrewer)
> 
> #Define main directory
> dir <- '/project2/gilad/ghousman/skeletal-human-chimp/'
> 
> #Load batch info
> batch <- read.csv(file=paste0(dir,'human-chimp-skeletal-scRNA/data/scrna-batch.csv'), header=TRUE, sep=",")
> 
> #Load objects
> objects <- readRDS(paste0(dir,"/human-chimp-skeletal-scRNA/data/cellranger-data-full/data.indv-cell.log.rds"))
> 
> #Define list subset
> #Select features for downstream integration (keeping at 10000 for now)
> #Identify anchors (used references + RPCA reduction method) #ALL OTHER METHODS CRASH
> #Integrate datasets
> #Reduce dimensionality
> #Save data
> 
> #combine osteoblasts from all samples
> obj.osteo <- list(objects[[5]],objects[[6]],objects[[11]],objects[[12]],objects[[17]],objects[[18]],objects[[23]],objects[[24]],
+                   objects[[29]],objects[[30]],objects[[35]],objects[[36]],objects[[41]],objects[[42]])
> obj.osteo.features <- SelectIntegrationFeatures(object.list=obj.osteo, nfeatures=10000)
> reference_dataset <- c(3:4) #H1C1-r2 differentiated the best
> obj.osteo <- lapply(X=obj.osteo, FUN=function(x) {
+     x <- ScaleData(x, features=obj.osteo.features, verbose=FALSE)
+     x <- RunPCA(x, features=obj.osteo.features, verbose=FALSE)
+ })
> obj.osteo.anchors <- FindIntegrationAnchors(object.list=obj.osteo, normalization.method="LogNormalize", anchor.features=obj.osteo.features,
+                                            reference=reference_dataset, reduction="rpca")
Scaling features for provided objects
Computing within dataset neighborhoods
Finding anchors between all query and reference datasets
Finding neighborhoods
Finding anchors
	Found 1505 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 804 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 475 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 412 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 458 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 905 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 442 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 508 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 624 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 511 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 297 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 447 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 336 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 960 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 387 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 507 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 829 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 780 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 485 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 441 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 842 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 965 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 453 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 518 anchors
Extracting within-dataset neighbors
Finding neighborhoods
Finding anchors
	Found 489 anchors
Extracting within-dataset neighbors
Warning message:
In CheckDuplicateCellNames(object.list = object.list) :
  Some cell names are duplicated across objects provided. Renaming to enforce unique cell names.
> int.osteo <- IntegrateData(anchorset=obj.osteo.anchors, normalization.method="LogNormalize")
Building integrated reference
Merging dataset 4 into 3
Extracting anchors for merged samples
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Warning: Adding a command log without an assay associated with it
Integrating dataset 1 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 2 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 5 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 6 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 7 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 8 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 9 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 10 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 11 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 12 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 13 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Integrating dataset 14 with reference dataset
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Integrating data
Warning: Adding a command log without an assay associated with it
> int.osteo <- ScaleData(int.osteo, verbose=FALSE)
> int.osteo <- RunPCA(object=int.osteo, npcs=100, verbose=FALSE)
> pva <- int.osteo@reductions$pca@stdev^2/int.osteo@reductions$pca@misc$total.variance
> ndim <- length(which(pva>=0.001)) #keep all dims that explaim more than 0.1% of variance
> print(ndim)
[1] 14
> int.osteo <- RunUMAP(int.osteo, dims=1:100)
Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric
To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'
This message will be shown once per session
10:24:52 UMAP embedding parameters a = 0.9922 b = 1.112
10:24:52 Read 26077 rows and found 100 numeric columns
10:24:52 Using Annoy for neighbor search, n_neighbors = 30
10:24:52 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
10:25:00 Writing NN index file to temp file /tmp/jobs/66565343/Rtmp9s7o8v/file46351845397c
10:25:00 Searching Annoy index using 1 thread, search_k = 3000
10:25:12 Annoy recall = 100%
10:25:12 Commencing smooth kNN distance calibration using 1 thread
10:25:13 Initializing from normalized Laplacian + noise
10:25:15 Commencing optimization for 200 epochs, with 1184790 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
10:25:47 Optimization finished
> saveRDS(int.osteo, file=paste0(dir,"/human-chimp-skeletal-scRNA/data/cellranger-data-full/data.indv-cell.log.10k.int.osteo.rds"))
> rm(obj.osteo,int.osteo)
> 
> 
> proc.time()
    user   system  elapsed 
1246.285  171.580 1432.312 
